{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/movie/src/components/Movie/Movie.js\";\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      // ES6 destructuring the props\n      const movieId = this.props.match.params.movieId;\n      fetch(endpoint).then(result => result.json()).then(result => {\n        if (result.status_code) {\n          // If we don't find any movie\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            // ... then fetch actors in the setState callback function\n            let endpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              }, () => {\n                localStorage.setItem(\"\".concat(movieId), JSON.stringify(this.state));\n              });\n            });\n          });\n        }\n      }).catch(error => console.error('Error:', error));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    }); //first fetch the movie ..\n\n    const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"?api_key=\").concat(API_KEY, \"&langyage=en-US\");\n    this.fetchItems(endpoint);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/mac/Desktop/movie/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","actors","directors","loading","fetchItems","endpoint","movieId","props","match","params","fetch","then","result","json","status_code","setState","movie","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","catch","error","console","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n    state = {\n        Movie: null,\n        actors: null,\n        directors: [],\n        loading: false\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true })\n        //first fetch the movie ..\n        const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&langyage=en-US`;\n        this.fetchItems(endpoint);\n\n    }\n\n    fetchItems = (endpoint) => {\n        // ES6 destructuring the props\n        const { movieId } = this.props.match.params;\n    \n        fetch(endpoint)\n        .then(result => result.json())\n        .then(result => {\n    \n          if (result.status_code) {\n            // If we don't find any movie\n            this.setState({ loading: false });\n          } else {\n            this.setState({ movie: result }, () => {\n              // ... then fetch actors in the setState callback function\n              let endpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n              fetch(endpoint)\n              .then(result => result.json())\n              .then(result => {\n    \n                const directors = result.crew.filter( (member) => member.job === \"Director\");\n    \n                this.setState({\n                  actors: result.cast,\n                  directors,\n                  loading: false\n                }, () => {\n                  localStorage.setItem(`${movieId}`, JSON.stringify(this.state));\n                })\n              })\n            })\n          }\n        })\n        .catch(error => console.error('Error:', error))\n      }\n        render() {\n          return (\n             <div className=\"rmdb-movie\">\n                <Navigation />\n                <MovieInfo />\n                <MovieInfoBar />\n                \n                <Spinner />\n             </div>\n        )       \n    }\n}\n\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}