{"ast":null,"code":"import _defineProperty from \"/Users/mac/Desktop/movie/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mac/Desktop/movie/src/components/Movie/Movie.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid.js';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      // ES6 destructuring the props\n      const movieId = this.props.match.params.movieId;\n      fetch(endpoint).then(result => result.json()).then(result => {\n        if (result.status_code) {\n          // If we don't find any movie\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            // ... then fetch actors in the setState callback function\n            let endpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              }, () => {\n                localStorage.setItem(\"\".concat(movieId), JSON.stringify(this.state));\n              });\n            });\n          });\n        }\n      }).catch(error => console.error('Error:', error));\n    };\n  }\n\n  componentDidMount() {\n    // ES6 destructuring the props\n    const movieId = this.props.match.params.movieId;\n\n    if (localStorage.getItem(\"\".concat(movieId))) {\n      let state = JSON.parse(localStorage.getItem(\"\".concat(movieId)));\n      this.setState(_objectSpread({}, state));\n    } else {\n      this.setState({\n        loading: true\n      }); // First fetch the movie ...\n\n      let endpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"?api_key=\").concat(API_KEY, \"&language=en-US\");\n      this.fetchItems(endpoint);\n    }\n  }\n\n  render() {\n    // ES6 Destructuring the props and state\n    const movieName = this.props.location.movieName;\n    const _this$state = this.state,\n          movie = _this$state.movie,\n          directors = _this$state.directors,\n          actors = _this$state.actors,\n          loading = _this$state.loading;\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: movie,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: movie,\n      directors: directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: movie.runtime,\n      budget: movie.budget,\n      revenue: movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })) : null, actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(FourColGrid, {\n      header: 'Actors',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, actors.map((element, i) => React.createElement(Actor, {\n      key: i,\n      actor: element,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })))) : null, !actors && !loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"No movie found\") : null, loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/mac/Desktop/movie/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","movieId","props","match","params","fetch","then","result","json","status_code","setState","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","catch","error","console","componentDidMount","getItem","parse","render","movieName","location","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid.js';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  state = {\n    movie: null,\n    actors: null,\n    directors: [],\n    loading: false\n  }\n\n  componentDidMount() {\n    // ES6 destructuring the props\n    const { movieId } = this.props.match.params;\n\n    if (localStorage.getItem(`${movieId}`)) {\n      let state = JSON.parse(localStorage.getItem(`${movieId}`))\n      this.setState({ ...state })\n    } else {\n      this.setState({ loading: true })\n      // First fetch the movie ...\n      let endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n      this.fetchItems(endpoint);\n    }\n  }\n\n  fetchItems = (endpoint) => {\n    // ES6 destructuring the props\n    const { movieId } = this.props.match.params;\n\n    fetch(endpoint)\n    .then(result => result.json())\n    .then(result => {\n\n      if (result.status_code) {\n        // If we don't find any movie\n        this.setState({ loading: false });\n      } else {\n        this.setState({ movie: result }, () => {\n          // ... then fetch actors in the setState callback function\n          let endpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n          fetch(endpoint)\n          .then(result => result.json())\n          .then(result => {\n\n            const directors = result.crew.filter( (member) => member.job === \"Director\");\n\n            this.setState({\n              actors: result.cast,\n              directors,\n              loading: false\n            }, () => {\n              localStorage.setItem(`${movieId}`, JSON.stringify(this.state));\n            })\n          })\n        })\n      }\n    })\n    .catch(error => console.error('Error:', error))\n  }\n\n  render() {\n    // ES6 Destructuring the props and state\n    const { movieName } = this.props.location;\n    const { movie, directors, actors, loading } = this.state;\n\n    return (\n      <div className=\"rmdb-movie\">\n        {movie ?\n        <div>\n          <Navigation movie={movie} />\n          <MovieInfo movie={movie} directors={directors} />\n          <MovieInfoBar time={movie.runtime} budget={movie.budget} revenue={movie.revenue} />\n        </div>\n        : null }\n        {actors ?\n        <div className=\"rmdb-movie-grid\">\n          <FourColGrid header={'Actors'}>\n            {actors.map( (element, i) => (\n              <Actor key={i} actor={element} />\n            ))}\n          </FourColGrid>\n        </div>\n        : null }\n        {!actors && !loading ? <h1>No movie found</h1> : null }\n        {loading ? <Spinner /> : null}\n      </div>\n    )\n  }\n}\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}